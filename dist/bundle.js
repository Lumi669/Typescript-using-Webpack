!function(){"use strict";class e{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=`${r}`),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}function t(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>=e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<=e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<=e.max),t}function n(e,t,n){const r=n.value;return{configurable:!0,enumerable:!1,get(){return r.bind(this)}}}var r;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(r||(r={}));class s{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.people=r,this.status=s}}class i extends class{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new i),this.instance}addProject(e,t,n){const i=new s(Math.random().toString(),e,t,n,r.Active);this.projects.push(i),this.updateListeners()}removeProject(e,t){const n=this.projects.find((t=>t.id===e));n&&n.status!==t&&(n.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}const l=i.getInstance();class o extends e{constructor(){super("project-input","app",!0),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}gatherUserInput(){const e=this.titleInputElement.value,n=this.descriptionInputElement.value,r=this.peopleInputElement.value,s={value:n,required:!0,minLength:5},i={value:+r,required:!0,min:1,max:5};return t({value:e,required:!0})&&t(s)&&t(i)?[e,n,+r]:void alert("Invalid input!")}clearInput(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;l.addProject(e,n,r),console.log(e,n,r),this.clearInput()}}}!function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);i>3&&l&&Object.defineProperty(t,n,l)}([n],o.prototype,"submitHandler",null);class a extends e{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1===this.project.people?"1 person":`${this.project.people} persons`}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log("drag end")}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description}}!function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);i>3&&l&&Object.defineProperty(t,n,l)}([n],a.prototype,"dragStartHandler",null);var c=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class d extends e{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){if(e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]){e.preventDefault();const t=this.element.querySelector("ul");null==t||t.classList.add("droppable")}}dropHandler(e){const t=e.dataTransfer.getData("text/plain");l.removeProject(t,"active"===this.type?r.Active:r.Finished)}dragLeaveHandler(e){const t=this.element.querySelector("ul");null==t||t.classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),l.addListener((e=>{const t=e.filter((e=>"active"===this.type?e.status===r.Active:e.status===r.Finished));this.assignedProjects=t,this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignedProjects)new a(this.element.querySelector("ul").id,e)}}c([n],d.prototype,"dragOverHandler",null),c([n],d.prototype,"dropHandler",null),c([n],d.prototype,"dragLeaveHandler",null),new o,new d("active"),new d("finished")}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bmRlcnN0YW5kaW5nLXR5cGVzY3JpcHQvLi9zcmMvY29tcG9uZW50cy9iYXNlLWNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly91bmRlcnN0YW5kaW5nLXR5cGVzY3JpcHQvLi9zcmMvdXRpbC92YWxpZGF0aW9uLnRzIiwid2VicGFjazovL3VuZGVyc3RhbmRpbmctdHlwZXNjcmlwdC8uL3NyYy9kZWNvcmF0b3JzL2F1dG9iaW5kLnRzIiwid2VicGFjazovL3VuZGVyc3RhbmRpbmctdHlwZXNjcmlwdC8uL3NyYy9tb2RlbHMvcHJvamVjdC50cyIsIndlYnBhY2s6Ly91bmRlcnN0YW5kaW5nLXR5cGVzY3JpcHQvLi9zcmMvc3RhdGUvcHJvamVjdC1zdGF0ZS50cyIsIndlYnBhY2s6Ly91bmRlcnN0YW5kaW5nLXR5cGVzY3JpcHQvLi9zcmMvY29tcG9uZW50cy9wcm9qZWN0LWlucHV0LnRzIiwid2VicGFjazovL3VuZGVyc3RhbmRpbmctdHlwZXNjcmlwdC8uL3NyYy9jb21wb25lbnRzL3Byb2plY3QtaXRlbS50cyIsIndlYnBhY2s6Ly91bmRlcnN0YW5kaW5nLXR5cGVzY3JpcHQvLi9zcmMvY29tcG9uZW50cy9wcm9qZWN0LWxpc3QudHMiLCJ3ZWJwYWNrOi8vdW5kZXJzdGFuZGluZy10eXBlc2NyaXB0Ly4vc3JjL2FwcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Qgc29tZXRoaW5nID0gXCIuLi5cIjtcblxuLy9jcmVhdGUgYSBiYXNlIGNsYXNzIHdpdGggY29tbW9uIGZ1bmN0aW9uYWxpdGllc1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50PFQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgVSBleHRlbmRzIEhUTUxFbGVtZW50PiB7XG4gICAgdGVtcGxhdGVFbGVtZW50OiBIVE1MVGVtcGxhdGVFbGVtZW50O1xuICAgIGhvc3RFbGVtZW50OiBUO1xuICAgIGVsZW1lbnQ6IFU7IC8vIHRoZXJlIGlzIG5vIEhUTUxTZWN0aW9uRWxlbWVudCwgc28gdXNlIEhUTUxFbGVtZW50XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdGVtcGxhdGVJZDogc3RyaW5nLFxuICAgICAgICBob3N0RWxlbWVudElkOiBzdHJpbmcsXG4gICAgICAgIGluc2VydEF0U3RhcnQ6IGJvb2xlYW4sXG4gICAgICAgIG5ld0VsZW1lbnRJZD86IHN0cmluZ1xuICAgICkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRlbXBsYXRlSWQpISBhcyBIVE1MVGVtcGxhdGVFbGVtZW50O1xuICAgICAgICB0aGlzLmhvc3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaG9zdEVsZW1lbnRJZCkhIGFzIFQ7XG4gICAgICAgIGNvbnN0IGltcG9ydGVkTm9kZSA9IGRvY3VtZW50LmltcG9ydE5vZGUodGhpcy50ZW1wbGF0ZUVsZW1lbnQuY29udGVudCwgdHJ1ZSk7XG5cbiAgICAgICAgLy9nZXQgdGhlIGNvbmNyZXRlIGVsZW1lbnQgb3V0IG9mIHRoZSB0ZW1wbGF0ZSBjb250ZW50XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGltcG9ydGVkTm9kZS5maXJzdEVsZW1lbnRDaGlsZCBhcyBVO1xuXG4gICAgICAgIC8vIGFkZCBhbiBpZFxuICAgICAgICBpZiAobmV3RWxlbWVudElkKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuaWQgPSBgJHtuZXdFbGVtZW50SWR9YDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dGFjaChpbnNlcnRBdFN0YXJ0KTtcbiAgICB9XG4gICAgcHJpdmF0ZSBhdHRhY2goaW5zZXJ0QXRCZWdpbm5pbmc6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5ob3N0RWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoXG4gICAgICAgICAgICBpbnNlcnRBdEJlZ2lubmluZyA/IFwiYWZ0ZXJiZWdpblwiIDogXCJiZWZvcmVlbmRcIixcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGNvbmZpZ3VyZSgpOiB2b2lkO1xuICAgIGFic3RyYWN0IHJlbmRlckNvbnRlbnQoKTogdm9pZDtcbn1cbiIsIi8vVmFsaWRhdGlvblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0YWJsZSB7XG4gICAgdmFsdWU6IHN0cmluZyB8IG51bWJlcjtcbiAgICByZXF1aXJlZD86IGJvb2xlYW47XG4gICAgbWluTGVuZ3RoPzogbnVtYmVyO1xuICAgIG1heExlbmd0aD86IG51bWJlcjtcbiAgICBtaW4/OiBudW1iZXI7XG4gICAgbWF4PzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUodmFsaWRhdGFibGVJbnB1dDogVmFsaWRhdGFibGUpIHtcbiAgICBsZXQgaXNWYWxpZCA9IHRydWU7XG4gICAgaWYgKHZhbGlkYXRhYmxlSW5wdXQucmVxdWlyZWQpIHtcbiAgICAgICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdmFsaWRhdGFibGVJbnB1dC52YWx1ZS50b1N0cmluZygpLnRyaW0oKS5sZW5ndGggIT09IDA7XG4gICAgfVxuICAgIGlmICh2YWxpZGF0YWJsZUlucHV0Lm1pbkxlbmd0aCAhPSBudWxsICYmIHR5cGVvZiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlzVmFsaWQgPSBpc1ZhbGlkICYmIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUubGVuZ3RoID49IHZhbGlkYXRhYmxlSW5wdXQubWluTGVuZ3RoO1xuICAgIH1cbiAgICBpZiAodmFsaWRhdGFibGVJbnB1dC5tYXhMZW5ndGggIT0gbnVsbCAmJiB0eXBlb2YgdmFsaWRhdGFibGVJbnB1dC52YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlLmxlbmd0aCA8PSB2YWxpZGF0YWJsZUlucHV0Lm1heExlbmd0aDtcbiAgICB9XG4gICAgaWYgKHZhbGlkYXRhYmxlSW5wdXQubWluICE9IG51bGwgJiYgdHlwZW9mIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdmFsaWRhdGFibGVJbnB1dC52YWx1ZSA+PSB2YWxpZGF0YWJsZUlucHV0Lm1pbjtcbiAgICB9XG4gICAgaWYgKHZhbGlkYXRhYmxlSW5wdXQubWF4ICE9IG51bGwgJiYgdHlwZW9mIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdmFsaWRhdGFibGVJbnB1dC52YWx1ZSA8PSB2YWxpZGF0YWJsZUlucHV0Lm1heDtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNWYWxpZDtcbn1cbiIsIi8vYXV0b2JpbmQgZGVjb3JhdG9yXG5leHBvcnQgZnVuY3Rpb24gQXV0b2JpbmQoXzogYW55LCBfMjogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgY29uc3QgYWRqdXN0RGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICBjb25zdCBib3VuZEZuID0gb3JpZ2luYWxNZXRob2QuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBib3VuZEZuO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYWRqdXN0RGVzY3JpcHRvcjtcbn1cbiIsImV4cG9ydCBlbnVtIFByb2plY3RTdGF0dXMge1xuICAgIEFjdGl2ZSxcbiAgICBGaW5pc2hlZFxufVxuXG5leHBvcnQgY2xhc3MgUHJvamVjdCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBpZDogc3RyaW5nLFxuICAgICAgICBwdWJsaWMgdGl0bGU6IHN0cmluZyxcbiAgICAgICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgICAgIHB1YmxpYyBwZW9wbGU6IG51bWJlcixcbiAgICAgICAgcHVibGljIHN0YXR1czogUHJvamVjdFN0YXR1c1xuICAgICkge31cbn1cbiIsImltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcbmltcG9ydCB7IFByb2plY3RTdGF0dXMgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcblxuLy8gUHJvamVjdCBTdGF0ZSBNYW5hZ2VtZW50LCB0aGlzIGlzIGEgZnVuY3Rpb24gdHlwZVxuLy90eXBlIExpc3RlbmVyID0gKGl0ZW1zOiBQcm9qZWN0W10pID0+IHZvaWQ7XG5cbi8vbm93IGdlbmVyaWMgZnVuY3RpdG9uIHR5cGVcbnR5cGUgTGlzdGVuZXI8VD4gPSAoaXRlbXM6IFRbXSkgPT4gdm9pZDtcblxuLy9jcmVhdGUgYSBiYXNlIGNsYXNzIGZvciBzdGF0ZSBtYW5hZ2VtZW50XG5jbGFzcyBTdGF0ZTxUPiB7XG4gICAgcHJvdGVjdGVkIGxpc3RlbmVyczogTGlzdGVuZXI8VD5bXSA9IFtdO1xuXG4gICAgYWRkTGlzdGVuZXIobGlzdGVuZXJGbjogTGlzdGVuZXI8VD4pIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lckZuKTtcbiAgICB9XG59XG4vLyBDcmVhdGUgYSBzaW5nbGV0b24gY2xhc3NcbmV4cG9ydCBjbGFzcyBQcm9qZWN0U3RhdGUgZXh0ZW5kcyBTdGF0ZTxQcm9qZWN0PiB7XG4gICAgcHJpdmF0ZSBwcm9qZWN0czogUHJvamVjdFtdID0gW107XG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFByb2plY3RTdGF0ZTtcblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBQcm9qZWN0U3RhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgYWRkUHJvamVjdCh0aXRsZTogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCBudW1PZlBlb3BsZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgUHJvamVjdChcbiAgICAgICAgICAgIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBudW1PZlBlb3BsZSxcbiAgICAgICAgICAgIFByb2plY3RTdGF0dXMuQWN0aXZlXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5wcm9qZWN0cy5wdXNoKG5ld1Byb2plY3QpO1xuICAgICAgICB0aGlzLnVwZGF0ZUxpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHJlbW92ZVByb2plY3QocHJvamVjdElkOiBzdHJpbmcsIG5ld1N0YXR1czogUHJvamVjdFN0YXR1cykge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5wcm9qZWN0cy5maW5kKHByaiA9PiBwcmouaWQgPT09IHByb2plY3RJZCk7XG4gICAgICAgIGlmIChwcm9qZWN0ICYmIHByb2plY3Quc3RhdHVzICE9PSBuZXdTdGF0dXMpIHtcbiAgICAgICAgICAgIHByb2plY3Quc3RhdHVzID0gbmV3U3RhdHVzO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlTGlzdGVuZXJzKCkge1xuICAgICAgICAvL3RoZSBtYWdpYyBoYXBwZW4gaGVyZSwgd2hlbiBuZXcgcHJvamVjdCBjb21lLCBldmVyeSBsaXN0ZW5lclxuICAgICAgICAvL3dpbGwgYmUgY2FsbGVkIHdpdGggYXJndW1lbnQgb2YgcHJvamVjdHMsIHNvIHVwZGF0ZSBlLmcgYXNzaWduZWRQcm9qZWN0c1xuICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyRm4gb2YgdGhpcy5saXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyRm4odGhpcy5wcm9qZWN0cy5zbGljZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gY29uc3QgcHJvamVjdFN0YXRlID0gbmV3IFByb2plY3RTdGF0ZSgpOyAvL3RoaXMgd2F5IGNhbiBjcmVhdGUgbWFueSBpbnN0YW5jZXNcblxuLy90aGlzIHdheSBjYW4gb25seSBjcmVhdGUgb25lIGluc3RhbmNlIHdoaWNoIGlzIGdsb2JhbFxuZXhwb3J0IGNvbnN0IHByb2plY3RTdGF0ZSA9IFByb2plY3RTdGF0ZS5nZXRJbnN0YW5jZSgpO1xuIiwiaW1wb3J0IGJiYiBmcm9tIFwiLi9iYXNlLWNvbXBvbmVudFwiO1xuLy8gaW1wb3J0IHsgVmFsaWRhdGFibGUsIHZhbGlkYXRlIH0gZnJvbSBcIi4uL3V0aWwvdmFsaWRhdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgVmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbC92YWxpZGF0aW9uXCI7XG5pbXBvcnQgeyBBdXRvYmluZCBhcyBhYWEgfSBmcm9tIFwiLi4vZGVjb3JhdG9ycy9hdXRvYmluZFwiO1xuaW1wb3J0IHsgcHJvamVjdFN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlL3Byb2plY3Qtc3RhdGVcIjtcblxuZXhwb3J0IGNsYXNzIFByb2plY3RJbnB1dCBleHRlbmRzIGJiYjxIVE1MRGl2RWxlbWVudCwgSFRNTEVsZW1lbnQ+IHtcbiAgICB0aXRsZUlucHV0RWxlbWVudDogSFRNTElucHV0RWxlbWVudDtcbiAgICBkZXNjcmlwdGlvbklucHV0RWxlbWVudDogSFRNTElucHV0RWxlbWVudDtcbiAgICBwZW9wbGVJbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJwcm9qZWN0LWlucHV0XCIsIFwiYXBwXCIsIHRydWUpLCBcInVzZXItaW5wdXRcIjtcblxuICAgICAgICAvL2FjY2VzcyB0aGUgMyBpbnB1dCBlbGVtZW50cyBpbiB0aGUgY2xhc3NcbiAgICAgICAgdGhpcy50aXRsZUlucHV0RWxlbWVudCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI3RpdGxlXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIFwiI2Rlc2NyaXB0aW9uXCJcbiAgICAgICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICB0aGlzLnBlb3BsZUlucHV0RWxlbWVudCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI3Blb3BsZVwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICB0aGlzLmNvbmZpZ3VyZSgpO1xuICAgIH1cblxuICAgIGNvbmZpZ3VyZSgpIHtcbiAgICAgICAgLy91c2UgXCJ0aGlzXCIgaW5zdGVhZCBvZiBcIlByb2plY3RJbnB1dFwiIGZvciB0aGUgYmluZCBhcmd1bWVudCAhISFcbiAgICAgICAgLy90aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLnN1Ym1pdEhhbmRsZXIuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy9ub3cgdXNlIGF1dG9iaW5kIGRlY29yYXRvciwgc28gbm8gbmVlZCB0byB1c2UgYmluZCBoZXJlXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuc3VibWl0SGFuZGxlcik7XG4gICAgfVxuXG4gICAgcmVuZGVyQ29udGVudCgpOiB2b2lkIHt9XG5cbiAgICBwcml2YXRlIGdhdGhlclVzZXJJbnB1dCgpOiBbc3RyaW5nLCBzdHJpbmcsIG51bWJlcl0gfCB2b2lkIHtcbiAgICAgICAgY29uc3QgZW50ZXJlZFRpdGxlID0gdGhpcy50aXRsZUlucHV0RWxlbWVudC52YWx1ZTtcbiAgICAgICAgY29uc3QgZW50ZXJlZERlc2NyaXB0aW9uID0gdGhpcy5kZXNjcmlwdGlvbklucHV0RWxlbWVudC52YWx1ZTtcbiAgICAgICAgY29uc3QgZW50ZXJlZFBlb3BsZSA9IHRoaXMucGVvcGxlSW5wdXRFbGVtZW50LnZhbHVlO1xuXG4gICAgICAgIGNvbnN0IHRpbHRsZVZhbGlkYXRhYmxlOiBWYWxpZGF0aW9uLlZhbGlkYXRhYmxlID0ge1xuICAgICAgICAgICAgdmFsdWU6IGVudGVyZWRUaXRsZSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uVmFsaWRhdGFibGU6IFZhbGlkYXRpb24uVmFsaWRhdGFibGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogZW50ZXJlZERlc2NyaXB0aW9uLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICBtaW5MZW5ndGg6IDVcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcGVvcGxlVmFsaWRhdGFibGU6IFZhbGlkYXRpb24uVmFsaWRhdGFibGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogK2VudGVyZWRQZW9wbGUsXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICAgIG1heDogNVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFWYWxpZGF0aW9uLnZhbGlkYXRlKHRpbHRsZVZhbGlkYXRhYmxlKSB8fFxuICAgICAgICAgICAgIVZhbGlkYXRpb24udmFsaWRhdGUoZGVzY3JpcHRpb25WYWxpZGF0YWJsZSkgfHxcbiAgICAgICAgICAgICFWYWxpZGF0aW9uLnZhbGlkYXRlKHBlb3BsZVZhbGlkYXRhYmxlKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiSW52YWxpZCBpbnB1dCFcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW2VudGVyZWRUaXRsZSwgZW50ZXJlZERlc2NyaXB0aW9uLCArZW50ZXJlZFBlb3BsZV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNsZWFySW5wdXQoKSB7XG4gICAgICAgIHRoaXMudGl0bGVJbnB1dEVsZW1lbnQudmFsdWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uSW5wdXRFbGVtZW50LnZhbHVlID0gXCJcIjtcbiAgICAgICAgdGhpcy5wZW9wbGVJbnB1dEVsZW1lbnQudmFsdWUgPSBcIlwiO1xuICAgIH1cblxuICAgIEBhYWFcbiAgICBwcml2YXRlIHN1Ym1pdEhhbmRsZXIoZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHVzZXJJbnB1dCA9IHRoaXMuZ2F0aGVyVXNlcklucHV0KCk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHVzZXJJbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbnN0IFt0aXRsZSwgZGVzYywgcGVvcGxlXSA9IHVzZXJJbnB1dDtcbiAgICAgICAgICAgIHByb2plY3RTdGF0ZS5hZGRQcm9qZWN0KHRpdGxlLCBkZXNjLCBwZW9wbGUpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGl0bGUsIGRlc2MsIHBlb3BsZSk7XG4gICAgICAgICAgICB0aGlzLmNsZWFySW5wdXQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcbmltcG9ydCB7IEF1dG9iaW5kIH0gZnJvbSBcIi4uL2RlY29yYXRvcnMvYXV0b2JpbmRcIjtcbmltcG9ydCBjY2MgZnJvbSBcIi4vYmFzZS1jb21wb25lbnRcIjtcbmltcG9ydCB7IERyYWdnYWJsZSB9IGZyb20gXCIuLi9tb2RlbHMvZHJhZy1kcm9wXCI7XG5cbi8vUHJvamVjdEl0ZW0gQ2xhc3NcbmV4cG9ydCBjbGFzcyBQcm9qZWN0SXRlbSBleHRlbmRzIGNjYzxIVE1MVUxpc3RFbGVtZW50LCBIVE1MTElFbGVtZW50PiBpbXBsZW1lbnRzIERyYWdnYWJsZSB7XG4gICAgcHJpdmF0ZSBwcm9qZWN0OiBQcm9qZWN0O1xuXG4gICAgLy9hZGQgYSBnZXR0ZXJcbiAgICBnZXQgcGVyc29ucygpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvamVjdC5wZW9wbGUgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBcIjEgcGVyc29uXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5wcm9qZWN0LnBlb3BsZX0gcGVyc29uc2A7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAQXV0b2JpbmRcbiAgICBkcmFnU3RhcnRIYW5kbGVyKGV2ZW50OiBEcmFnRXZlbnQpIHtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyIS5zZXREYXRhKFwidGV4dC9wbGFpblwiLCB0aGlzLnByb2plY3QuaWQpO1xuICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIhLmVmZmVjdEFsbG93ZWQgPSBcIm1vdmVcIjtcbiAgICB9XG4gICAgZHJhZ0VuZEhhbmRsZXIoXzogRHJhZ0V2ZW50KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZHJhZyBlbmRcIik7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoaG9zdElkOiBzdHJpbmcsIHByb2plY3Q6IFByb2plY3QpIHtcbiAgICAgICAgc3VwZXIoXCJzaW5nbGUtcHJvamVjdFwiLCBob3N0SWQsIGZhbHNlLCBwcm9qZWN0LmlkKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJDb250ZW50KCk7XG4gICAgfVxuXG4gICAgY29uZmlndXJlKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdzdGFydFwiLCB0aGlzLmRyYWdTdGFydEhhbmRsZXIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdlbmRcIiwgdGhpcy5kcmFnRW5kSGFuZGxlcik7XG4gICAgfVxuXG4gICAgcmVuZGVyQ29udGVudCgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoMlwiKSEudGV4dENvbnRlbnQgPSB0aGlzLnByb2plY3QudGl0bGU7XG4gICAgICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaDNcIikhLnRleHRDb250ZW50ID0gdGhpcy5wZXJzb25zICsgXCIgYXNzaWduZWRcIjtcbiAgICAgICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJwXCIpIS50ZXh0Q29udGVudCA9IHRoaXMucHJvamVjdC5kZXNjcmlwdGlvbjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBBdXRvYmluZCB9IGZyb20gXCIuLi9kZWNvcmF0b3JzL2F1dG9iaW5kXCI7XG5pbXBvcnQgeyBEcmFnVGFyZ2V0IH0gZnJvbSBcIi4uL21vZGVscy9kcmFnLWRyb3BcIjtcbmltcG9ydCBkZGQgZnJvbSBcIi4vYmFzZS1jb21wb25lbnRcIjtcbmltcG9ydCB7IFByb2plY3QsIFByb2plY3RTdGF0dXMgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcbmltcG9ydCB7IHByb2plY3RTdGF0ZSB9IGZyb20gXCIuLi9zdGF0ZS9wcm9qZWN0LXN0YXRlXCI7XG5cbmltcG9ydCB7IFByb2plY3RJdGVtIH0gZnJvbSBcIi4vcHJvamVjdC1pdGVtXCI7XG5cbi8vIFByb2plY3RMaXN0IENsYXNzXG5leHBvcnQgY2xhc3MgUHJvamVjdExpc3QgZXh0ZW5kcyBkZGQ8SFRNTFRlbXBsYXRlRWxlbWVudCwgSFRNTEVsZW1lbnQ+IGltcGxlbWVudHMgRHJhZ1RhcmdldCB7XG4gICAgYXNzaWduZWRQcm9qZWN0czogUHJvamVjdFtdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0eXBlOiBcImFjdGl2ZVwiIHwgXCJmaW5pc2hlZFwiKSB7XG4gICAgICAgIHN1cGVyKFwicHJvamVjdC1saXN0XCIsIFwiYXBwXCIsIGZhbHNlLCBgJHt0eXBlfS1wcm9qZWN0c2ApO1xuICAgICAgICB0aGlzLmFzc2lnbmVkUHJvamVjdHMgPSBbXTtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJDb250ZW50KCk7XG4gICAgfVxuXG4gICAgQEF1dG9iaW5kXG4gICAgZHJhZ092ZXJIYW5kbGVyKGV2ZW50OiBEcmFnRXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRhdGFUcmFuc2ZlciAmJiBldmVudC5kYXRhVHJhbnNmZXIudHlwZXNbMF0gPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc3QgbGlzdEVsID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ1bFwiKTtcbiAgICAgICAgICAgIGxpc3RFbD8uY2xhc3NMaXN0LmFkZChcImRyb3BwYWJsZVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBBdXRvYmluZFxuICAgIGRyb3BIYW5kbGVyKGV2ZW50OiBEcmFnRXZlbnQpIHtcbiAgICAgICAgY29uc3QgcHJqSWQgPSBldmVudC5kYXRhVHJhbnNmZXIhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpO1xuICAgICAgICBwcm9qZWN0U3RhdGUucmVtb3ZlUHJvamVjdChcbiAgICAgICAgICAgIHByaklkLFxuICAgICAgICAgICAgdGhpcy50eXBlID09PSBcImFjdGl2ZVwiID8gUHJvamVjdFN0YXR1cy5BY3RpdmUgOiBQcm9qZWN0U3RhdHVzLkZpbmlzaGVkXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQEF1dG9iaW5kXG4gICAgZHJhZ0xlYXZlSGFuZGxlcihfMzogRHJhZ0V2ZW50KSB7XG4gICAgICAgIGNvbnN0IGxpc3RFbCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwidWxcIik7XG4gICAgICAgIGxpc3RFbD8uY2xhc3NMaXN0LnJlbW92ZShcImRyb3BwYWJsZVwiKTtcbiAgICB9XG5cbiAgICBjb25maWd1cmUoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgdGhpcy5kcmFnT3ZlckhhbmRsZXIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdsZWF2ZVwiLCB0aGlzLmRyYWdMZWF2ZUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgdGhpcy5kcm9wSGFuZGxlcik7XG5cbiAgICAgICAgcHJvamVjdFN0YXRlLmFkZExpc3RlbmVyKChwcm9qZWN0czogUHJvamVjdFtdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWxldmFudFByb2plY3RzID0gcHJvamVjdHMuZmlsdGVyKHByaiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gXCJhY3RpdmVcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJqLnN0YXR1cyA9PT0gUHJvamVjdFN0YXR1cy5BY3RpdmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwcmouc3RhdHVzID09PSBQcm9qZWN0U3RhdHVzLkZpbmlzaGVkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuYXNzaWduZWRQcm9qZWN0cyA9IHJlbGV2YW50UHJvamVjdHM7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclByb2plY3RzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlckNvbnRlbnQoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RJZCA9IGAke3RoaXMudHlwZX0tcHJvamVjdHMtbGlzdGA7XG4gICAgICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwidWxcIikhLmlkID0gbGlzdElkO1xuICAgICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcImgyXCIpIS50ZXh0Q29udGVudCA9IHRoaXMudHlwZS50b1VwcGVyQ2FzZSgpICsgXCIgUFJPSkVDVFNcIjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclByb2plY3RzKCkge1xuICAgICAgICBjb25zdCBsaXN0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHt0aGlzLnR5cGV9LXByb2plY3RzLWxpc3RgKSEgYXMgSFRNTFVMaXN0RWxlbWVudDtcbiAgICAgICAgbGlzdEVsLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIGZvciAoY29uc3QgcHJqSXRlbSBvZiB0aGlzLmFzc2lnbmVkUHJvamVjdHMpIHtcbiAgICAgICAgICAgIG5ldyBQcm9qZWN0SXRlbSh0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInVsXCIpIS5pZCwgcHJqSXRlbSk7XG5cbiAgICAgICAgICAgIC8vIGNvbnN0IGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkxpXCIpO1xuICAgICAgICAgICAgLy8gbGlzdEl0ZW0udGV4dENvbnRlbnQgPSBwcmpJdGVtLnRpdGxlO1xuICAgICAgICAgICAgLy8gbGlzdEVsLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFByb2plY3RJbnB1dCB9IGZyb20gXCIuL2NvbXBvbmVudHMvcHJvamVjdC1pbnB1dFwiO1xuaW1wb3J0IHsgUHJvamVjdExpc3QgfSBmcm9tIFwiLi9jb21wb25lbnRzL3Byb2plY3QtbGlzdFwiO1xuXG4vLyBQcm9qZWN0IFR5cGVcblxuLy8gY3JlYXRlIGFuIGluc3RhbmNlLCBub3cgaW4gVUkgZm9ybSBzaG93c1xubmV3IFByb2plY3RJbnB1dCgpO1xuXG4vL2NyZWF0ZSBhbiBpbnN0YW5jZSBvZiBhY3RpdmUgcHJvamVjdCBsaXN0LCBub3cgaW4gVUkgc2hvdWxkIHNob3dzXG5uZXcgUHJvamVjdExpc3QoXCJhY3RpdmVcIik7XG5uZXcgUHJvamVjdExpc3QoXCJmaW5pc2hlZFwiKTtcbiJdLCJuYW1lcyI6WyJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInRlbXBsYXRlSWQiLCJob3N0RWxlbWVudElkIiwiaW5zZXJ0QXRTdGFydCIsIm5ld0VsZW1lbnRJZCIsInRoaXMiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaG9zdEVsZW1lbnQiLCJpbXBvcnRlZE5vZGUiLCJpbXBvcnROb2RlIiwiY29udGVudCIsImVsZW1lbnQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImlkIiwiYXR0YWNoIiwiaW5zZXJ0QXRCZWdpbm5pbmciLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJ2YWxpZGF0ZSIsInZhbGlkYXRhYmxlSW5wdXQiLCJpc1ZhbGlkIiwicmVxdWlyZWQiLCJ2YWx1ZSIsInRvU3RyaW5nIiwidHJpbSIsImxlbmd0aCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsIm1pbiIsIm1heCIsIkF1dG9iaW5kIiwiXyIsIl8yIiwiZGVzY3JpcHRvciIsIm9yaWdpbmFsTWV0aG9kIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImJpbmQiLCJQcm9qZWN0U3RhdHVzIiwiUHJvamVjdCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJwZW9wbGUiLCJzdGF0dXMiLCJQcm9qZWN0U3RhdGUiLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsImxpc3RlbmVyRm4iLCJwdXNoIiwic3VwZXIiLCJwcm9qZWN0cyIsInN0YXRpYyIsImluc3RhbmNlIiwiYWRkUHJvamVjdCIsIm51bU9mUGVvcGxlIiwibmV3UHJvamVjdCIsIk1hdGgiLCJyYW5kb20iLCJBY3RpdmUiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJyZW1vdmVQcm9qZWN0IiwicHJvamVjdElkIiwibmV3U3RhdHVzIiwicHJvamVjdCIsImZpbmQiLCJwcmoiLCJzbGljZSIsInByb2plY3RTdGF0ZSIsImdldEluc3RhbmNlIiwiUHJvamVjdElucHV0IiwidGl0bGVJbnB1dEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQiLCJwZW9wbGVJbnB1dEVsZW1lbnQiLCJjb25maWd1cmUiLCJhZGRFdmVudExpc3RlbmVyIiwic3VibWl0SGFuZGxlciIsInJlbmRlckNvbnRlbnQiLCJnYXRoZXJVc2VySW5wdXQiLCJlbnRlcmVkVGl0bGUiLCJlbnRlcmVkRGVzY3JpcHRpb24iLCJlbnRlcmVkUGVvcGxlIiwiZGVzY3JpcHRpb25WYWxpZGF0YWJsZSIsInBlb3BsZVZhbGlkYXRhYmxlIiwiYWxlcnQiLCJjbGVhcklucHV0IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInVzZXJJbnB1dCIsIkFycmF5IiwiaXNBcnJheSIsImRlc2MiLCJjb25zb2xlIiwibG9nIiwiUHJvamVjdEl0ZW0iLCJob3N0SWQiLCJwZXJzb25zIiwiZHJhZ1N0YXJ0SGFuZGxlciIsImRhdGFUcmFuc2ZlciIsInNldERhdGEiLCJlZmZlY3RBbGxvd2VkIiwiZHJhZ0VuZEhhbmRsZXIiLCJ0ZXh0Q29udGVudCIsIlByb2plY3RMaXN0IiwidHlwZSIsImFzc2lnbmVkUHJvamVjdHMiLCJkcmFnT3ZlckhhbmRsZXIiLCJ0eXBlcyIsImxpc3RFbCIsImNsYXNzTGlzdCIsImFkZCIsImRyb3BIYW5kbGVyIiwicHJqSWQiLCJnZXREYXRhIiwiRmluaXNoZWQiLCJkcmFnTGVhdmVIYW5kbGVyIiwiXzMiLCJyZW1vdmUiLCJyZWxldmFudFByb2plY3RzIiwiZmlsdGVyIiwicmVuZGVyUHJvamVjdHMiLCJsaXN0SWQiLCJ0b1VwcGVyQ2FzZSIsImlubmVySFRNTCIsInByakl0ZW0iXSwic291cmNlUm9vdCI6IiJ9